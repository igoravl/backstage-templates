apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: git-repo
  title: Git Repository
  description: Use this template to create a new Git repository
  tags: ['devops', 'azure-devops', 'git']
spec:
  owner: cloudmotionbr/backstage
  type: devops

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Repository Information
      required: [ name, description, gitFlow, owner]
      properties:
        name:
          title: Repository Name
          type: string
          description: Enter the name of the new Git repository. Use only letters, numbers, and hyphens.
        description:
          title: Description
          type: string
          description: Description of your project/repository.
          ui:options:
            rows: 5
        gitFlow: 
          title: Git Workflow 
          type: boolean
          description: Specify the Git workflow to be used in your repository
          ui:widget: radio
          enumNames:
            - GitFlow
            - GitHubFlow
        gitIgnore:
          title: .gitignore File
          type: string
          description: Include a standard .gitignore file in the repository?
          enum: ['Node', 'VisualStudio', 'Global/VisualStudioCode']
          enumNames: ['Node.js', 'Visual Studio', 'Visual Studio Code']
        owner:
          title: Squad
          description: The name of the squad responsible for this repository
          type: string
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: [ 'Group' ]

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: debug
      name: Debug
      action: debug:log
      input:
        message: '! '
    - id: download-readme
      name: Fetch README
      action: fetch:template
      input:
        url: ./template
        values:
          name: '${{ parameters.name }}'
          description: '${{ parameters.description }}'
    # - id: download-gitignore
    #   name: Fetch .gitignore
    #   action: fetch:file
    #   if: '${{ parameters.gitIgnore }}'
    #   input:
    #     url: https://raw.githubusercontent.com/github/gitignore/master/${{ parameters.gitIgnore }}.gitignore
    #     fileName: .gitignore
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
