apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: aspnet-core-webapi
  title: ASP.NET Core 5.0 Web API
  description: Use this template to create a new Web API project using ASP.NET Core 5.0
  tags: [dotnet, webapi, dotnetcore, aspnetcore]

spec:
  owner: igoravl
  type: service
  parameters:
    - title: Project Configuration
      required: [name, title, description, namespace]
      properties:
        name:
          title: Name
          type: string
          description: Name of your project. Use only letters, numbers, dots, and hyphens.
          ui:autofocus: true
        title:
          title: Title
          type: string
          description: Friendly name of your project, which will be displayed in the README and component catalog.
        description:
          title: Description
          type: string
          description: Brief description of your project.
          ui:options:
            rows: 5
        namespace:
          title: Root Namespace
          type: string
          description: The root namespace of the project. Use only letters and dots.
        owner:
          title: Owner(s)
          type: string
          description: Team responsible for the project
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: [Group]    
    - title: Repository Configuration
      required:
        - repoUrl
      properties: 
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./template
        copyWithoutRender:
          - .github/workflows/*
        values:
          name: '${{ parameters.name }}'
          title: '${{ parameters.title }}'
          description: '${{ parameters.description }}'
          namespace: '${{ parameters.namespace }}'
          destination: '{{ parameters.repoUrl | parseRepoUrl }}'
          owner: '${{ parameters.owner }}'

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: '${{ parameters.title }}'
        repoUrl: '${{ parameters.repoUrl }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: '${{steps.publish.output.remoteUrl }}'
    entityRef: '${{steps.register.output.entityRef }}'
